/**
 * 有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。
 * 注意，不是必须有这些素因子，而是必须不包含其他的素因子。
 * 例如，前几个数按顺序应该是 1，3，5，7，9，15，21。
 * 
 * 示例 1:
 * 输入: k = 5
 * 输出: 9
 */


/**
 * @param {number} k
 * @return {number}
 */

/**
 * 
 * 解题思路：定义三个指针分别对应乘以3 5 7
 * 初始时 三个指针的索引都为0，然后下一个数为当前指针对应的值的乘积中的最小的一个
 * 初始为 1*3  1*5 1*7  所以下一个值为3，并将3指针移向下一个
 * 1       1   3
 * p3          p3
 * p5  ->  p5
 * p7      p7
 * 
 * 再将对应指针的对应值进行比较 取最小的一个
 * 即 3*3 1*5 1*7  所以下一个值为5，并将5指针移向下一个
 * 1   3        1   3   5 
 *     p3           p3
 * p5      ->       p5
 * p7           p7
 * 
 * 1   3   5       1   3   5   7
 *     p3              p3
 *     p5     ->       p5
 * p7                  p7
 * 
 * 依次类推，直到找到第k个数
 */


 var getKthMagicNumber = function(k) {
  let arr = []
  let p3 = p5 = p7 = 0
  arr[0] = 1
  for (let i = 1; i < k; i++) {
      arr[i] = Math.min(arr[p3] * 3, Math.min(arr[p5] * 5, arr[p7] * 7))
      if(arr[i] === arr[p3] * 3) p3++
      if(arr[i] === arr[p5] * 5) p5++
      if(arr[i] === arr[p7] * 7) p7++
  }
  return arr[k - 1]
};
